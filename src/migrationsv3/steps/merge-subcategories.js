/*
# Category Merger Template - Ultra Minimal

AdÄ±m adÄ±m gereksinim implementasyonu iÃ§in minimal ÅŸablon.

Gereksinimler:
1. Target DB'deki category_translations.slug deÄŸerleri aynÄ± olan kategoriler merge edilmeli
2. AynÄ± slug'a ait farklÄ± parent altÄ±nda kategoriler merge olmamalÄ±
3. Hem parent slug'Ä± hem de kendi slug'Ä± aynÄ± olan kategoriler merge olmalÄ±
4. Parent slug controlÃ¼: parent iliÅŸkisindeki category_translations.slug'dan yapÄ±lmalÄ±
5. Merge: Grup iÃ§indeki kategorilerden biri silinmeli, Ã¼rÃ¼nleri kalan kategoriye taÅŸÄ±nmalÄ±
6. Kalan kategoriler iÃ§in parent slug hesaplamasÄ± ve gÃ¼ncellemesi yapÄ±lmalÄ±
*/

const logger = require('../../logger');

class MergeStep {
    constructor(targetDb, defaultLanguageId) {
        this.targetDb = targetDb;
        this.defaultLanguageId = defaultLanguageId;
    }

    async run() {
        try {
            logger.info('Starting merge process...');

            // target veritabanÄ±na sql sorgusu gÃ¶nder. kategori merge gruplarÄ±nÄ± belirlemek iÃ§in.
            const sql = `
SELECT ct.slug as category_slug, COALESCE(parent_ct.slug, '') as parent_slug, ARRAY_AGG(c.id ORDER BY 
  (SELECT COUNT(*) FROM product_categories pc WHERE pc.category_id = c.id)
) as category_ids
FROM categories c
JOIN category_translations ct ON c.id = ct.category_id AND ct.language_id = $1
LEFT JOIN categories parent_c ON c.parent_id = parent_c.id
LEFT JOIN category_translations parent_ct ON parent_c.id = parent_ct.category_id AND parent_ct.language_id = $2
GROUP BY ct.slug, COALESCE(parent_ct.slug, '')
HAVING COUNT(*) > 1
ORDER BY COALESCE(parent_ct.slug, '') desc, ct.slug
`;

            const result = await this.targetDb.query(sql, [this.defaultLanguageId, this.defaultLanguageId]);
            logger.info(`Found ${result.length} merge groups`);
            const categoriesToDelete = [];
            for (const group of result) {
                // category_ids bÃ¶lÃ¼mÃ¼nden 0'Ä±ncÄ±sÄ±nÄ± silinecek kategori olarak, 1'sini kalacak kategori olarak deÄŸiÅŸkene ata
                const categoryIdsToMerge = group.category_ids;
                const categoryToDelete = categoryIdsToMerge[0]; // Silinecek kategori (0'Ä±ncÄ± index)
                const categoryToKeep = categoryIdsToMerge[1]; // Kalacak kategori (1'inc index)

                logger.info(`Merge Group: "${group.category_slug}" (parent: "${group.parent_slug}")`);
                logger.info(`  - Kalacak kategori: ${categoryToKeep}`);
                logger.info(`  - Silinecek kategori: ${categoryToDelete}`);
                logger.info(`  - Total categories: ${categoryIdsToMerge.length}`);

                // ÃœrÃ¼n transferi iÅŸlemini Ã§aÄŸÄ±r
                const productsTransferred = await this.transferProducts(categoryToDelete, categoryToKeep);

                // Parent iliÅŸkisini transfer et
                const parentsTransferred = await this.transferParentRelation(categoryToDelete, categoryToKeep);

                // Kategori silme iÅŸlemini Ã§aÄŸÄ±r
                categoriesToDelete.push(categoryToDelete);

                logger.info(`âœ… Bu grup iÃ§in merge tamamlandÄ±: ${productsTransferred} Ã¼rÃ¼n taÅŸÄ±ndÄ±, ${parentsTransferred} parent iliÅŸkisi gÃ¼ncellendi, kategori silindi`);
            }

            // bulk category delete
            const sqlDelete = `DELETE FROM categories WHERE id = ANY($1)`;
            await this.targetDb.query(sqlDelete, [categoriesToDelete]);
            logger.info(`âœ… Toplam ${categoriesToDelete.length} kategori silindi`);

            // Step 6: Kalan kategoriler iÃ§in parent slug hesaplamasÄ± ve gÃ¼ncellemesi yap
            logger.info('ðŸ”„ Kalan kategoriler iÃ§in parent slug hesaplamasÄ± baÅŸlatÄ±lÄ±yor...');
            await this.calculateParentSlugs();
            logger.info('âœ… Parent slug hesaplamasÄ± tamamlandÄ±');

            logger.info('Merge process completed successfully.');

            return { success: true, message: `Found ${result.length} categories groups to merge` };
        } catch (error) {
            logger.error('Merge failed', { error: error.message });
            return { success: false, message: error.message };
        }
    }

    // ÃœrÃ¼n transferi fonksiyonu - silinecek kategorinin Ã¼rÃ¼nlerini kalacak kategoriye taÅŸÄ±r
    async transferProducts(categoryIdFrom, categoryIdTo) {
        try {
            logger.debug(`ÃœrÃ¼n transferi baÅŸlatÄ±lÄ±yor: ${categoryIdFrom} â†’ ${categoryIdTo}`);

            // UPDATE yaklaÅŸÄ±mÄ± ile Ã¼rÃ¼nleri transfer et - daha gÃ¼venilir ve basit
            const updateResult = await this.targetDb.query(
                'UPDATE product_categories SET category_id = $2 WHERE category_id = $1',
                [categoryIdFrom, categoryIdTo]
            );

            const updatedProductCount = updateResult.rowCount || 0;
            logger.debug(`${updatedProductCount} Ã¼rÃ¼n ${categoryIdFrom}'den ${categoryIdTo}'ye transfer edildi`);
            return updatedProductCount;

        } catch (error) {
            logger.error(`ÃœrÃ¼n transferi hatasÄ± (${categoryIdFrom} â†’ ${categoryIdTo}):`, { error: error.message });
            throw error;
        }
    }

    // Parent iliÅŸkisini transfer et - silinecek kategoriyi parent olarak gÃ¶ren kategorilerin parent_id'sini gÃ¼ncelle
    async transferParentRelation(categoryIdFrom, categoryIdTo) {
        try {
            logger.debug(`Parent iliÅŸkisi transferi baÅŸlatÄ±lÄ±yor: ${categoryIdFrom} â†’ ${categoryIdTo}`);

            // Silinecek kategoriyi parent olarak gÃ¶ren kategorilerin parent_id'sini deÄŸiÅŸtir
            const updateResult = await this.targetDb.query(
                'UPDATE categories SET parent_id = $2 WHERE parent_id = $1',
                [categoryIdFrom, categoryIdTo]
            );

            const updatedParentCount = updateResult.rowCount || 0;
            logger.debug(`${updatedParentCount} parent iliÅŸkisi ${categoryIdFrom}'den ${categoryIdTo}'ye aktarÄ±ldÄ±`);
            return updatedParentCount;

        } catch (error) {
            logger.error(`Parent transferi hatasÄ± (${categoryIdFrom} â†’ ${categoryIdTo}):`, { error: error.message });
            throw error;
        }
    }

    // Parent slug hesaplamasÄ± - merge sonrasÄ± kalan kategorilerin hiyerarÅŸik parent slugs'larÄ±nÄ± hesaplar
    async calculateParentSlugs() {
        try {
            logger.info('Parent slug hesaplamasÄ± baÅŸlatÄ±lÄ±yor...');

            // Mevcut kategorileri ve parent iliÅŸkilerini al
            const categories = await this.targetDb.query(`
                SELECT
                    c.id,
                    c.parent_id,
                    ct.slug,
                    ct.title
                FROM categories c
                LEFT JOIN category_translations ct ON c.id = ct.category_id
                WHERE ct.language_id = $1
                ORDER BY c.id
            `, [this.defaultLanguageId]);

            if (categories.length === 0) {
                logger.debug('Parent slug hesaplamasÄ± iÃ§in kategori bulunamadÄ±');
                return;
            }

            // Kategori map'i oluÅŸtur
            const categoryMap = new Map();
            categories.forEach(cat => {
                categoryMap.set(cat.id, cat);
            });

            // Parent slugs'larÄ± hesapla iÃ§in cache
            const parentSlugsCache = new Map();

            // Kategorileri hierarchy seviyesine gÃ¶re sÄ±rala (parent'lar Ã¶nce)
            const sortedCategories = categories.sort((a, b) => {
                // Her kategorinin kaÃ§ parent'Ä± olduÄŸunu say
                let aDepth = 0;
                let currentA = a;
                while (currentA.parent_id) {
                    aDepth++;
                    currentA = categoryMap.get(currentA.parent_id);
                    if (!currentA) break;
                }

                let bDepth = 0;
                let currentB = b;
                while (currentB.parent_id) {
                    bDepth++;
                    currentB = categoryMap.get(currentB.parent_id);
                    if (!currentB) break;
                }

                return aDepth - bDepth;
            });

            // Her kategori iÃ§in parent slugs'larÄ± hesapla (parent'lar Ã¶nce)
            for (const category of sortedCategories) {
                const slugs = [];
                let currentId = category.parent_id;

                // Hierarchy'yi yukarÄ± doÄŸru gezerek parent slugs'larÄ± topla
                while (currentId) {
                    const parent = categoryMap.get(currentId);
                    if (!parent || !parent.slug) break;

                    slugs.unshift(parent.slug);
                    currentId = parent.parent_id;
                }

                // Parent slugs varsa "parent-slugs/current-slug" formatÄ±nda oluÅŸtur
                let parentSlugs = null;
                if (slugs.length > 0) {
                    if (category.slug) {
                        parentSlugs = slugs.join('/') + '/' + category.slug;
                    } else {
                        parentSlugs = slugs.join('/');
                    }
                }

                parentSlugsCache.set(category.id, parentSlugs);
            }

            // Database'i hesaplanan parent slugs ile gÃ¼ncelle
            let updatedCount = 0;
            for (const category of categories) {
                const parentSlugs = parentSlugsCache.get(category.id);

                // Sadece parent_slugs null ise gÃ¼ncelle
                const currentTranslation = await this.targetDb.query(`
                    SELECT parent_slugs FROM category_translations
                    WHERE category_id = $1 AND language_id = $2
                `, [category.id, this.defaultLanguageId]);

                if (currentTranslation.length > 0 && currentTranslation[0].parent_slugs === null) {
                    await this.targetDb.query(`
                        UPDATE category_translations
                        SET parent_slugs = $1, updated_at = NOW()
                        WHERE category_id = $2 AND language_id = $3
                    `, [parentSlugs, category.id, this.defaultLanguageId]);
                    updatedCount++;
                }
            }

            logger.info(`âœ… ${updatedCount} kategorinin parent slugs'Ä± gÃ¼ncellendi`);
        } catch (error) {
            logger.error('Parent slug hesaplamasÄ± hatasÄ±:', { error: error.message });
            throw error;
        }
    }
}

module.exports = MergeStep;
